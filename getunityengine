#!/bin/bash

set -e

# Copyright (c) 2015, djcj <djcj@gmx.de>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

LANG=C
LANGUAGE=C
LC_ALL=C

appname=$(basename "$0")
version="$1"
exe=`mktemp /tmp/UnitySetup-XXXXXXXXXX --suffix=.exe`
files=`mktemp -d /tmp/unityengine-XXXXXXXXXX`
engines="$HOME/.local/share/UnityEngine2deb/Engines"

if [ -z "$1" ] || [ "$1" = "-h" ] || [ "$1" = "--help" ] ; then
cat << EOF

 Download Linux binaries of a specific Unity engine version.
 <version> must be specified as <major>.<minor>.<patch> (i.e. 4.6.5).

 Usage:
   $appname <version>
   $appname -h|--help

 Options:
   -h, --help           print this message

EOF
exit 0
fi

txz="$engines/$version.tar.xz"

err1 () {
	echo "Incorrect version string!"
	exit 1
}

set +e; which aria2c 2>/dev/null >/dev/null; set -e
exitCode=$(echo $?)
if [ $exitCode = 0 ]; then
	# The SDKs are huge, usually over 1G. If available, use aria2c to
	# download the SDK because of its ability to pre-allocate space.
	download="aria2c --file-allocation=prealloc -d / -o"
else
	download="wget -O"
fi

major=$(echo "$version" | cut -d. -f1)
length=$(($(printf "$version" | wc -m)))
case $major in
	4|5) if [ $length -lt 5 ]; then err1; fi ;;
	*) err1 ;;
esac

mkdir -p "$engines"
if [ -f "$txz" ]; then
	echo "\`$version.tar.xz' already in cache."
	echo "No need to donwload anything."
	exit 0
fi

### download pre-packaged engine binaries
if [ -f "$engines/links.txt" ]; then
	mv -f "$engines/links.txt" "$engines/links.txt.old"
fi
wget -O "$engines/links.txt" "https://raw.githubusercontent.com/darealshinji/UnityEngine2deb/master/links.txt"

set +e; dldata="$(grep -F "$version" "$engines/links.txt")"; set -e

if [ -z $dldata ]; then
	### download the Unity SDK
	set +e; which 7z 2>/dev/null >/dev/null; set -e
	exitCode=$(echo $?)
	if [ $exitCode = 1 ]; then
		echo "You need 7zip (p7zip-full package) to extract files from the Unity SDK setup package."
		exit 1
	fi

	echo ""
	echo "-- download Unity $version SDK"
	rm -f $exe
	if [ $major = 5 ]; then
		url="$(wget -q -O - "https://unity3d.com/get-unity/download/archive" | grep "UnitySetup64-$version" | cut -d '"' -f2)"
		if [ -z $url ]; then err1; fi
		$download $exe $url
	elif [ $major = 4 ]; then
		version="$(echo $version | head -c5)"
		$download $exe "http://download.unity3d.com/download_unity/UnitySetup-$version.exe"
	fi

	echo ""
	echo "-- extract SDK files"
	7z x $exe -o$files

	set +e
	inodes="$(ls -1i "$files" | awk '{print $1}' | tr '\n' ' ')"
	for n in $inodes; do
		find $files -inum $n -exec mv -v '{}' $files/$n 2>/dev/null \;
	done
	find $files -type d -name linux*_withgfx_development* -exec mv '{}' "$files" 2>/dev/null \;
	find $files -type d -name linux*_headless_development* -exec mv '{}' "$files" 2>/dev/null \;
	set -e

	echo ""
	echo "-- move engine binaries"
	mkdir -vp $files/$version/Mono/x86
	mkdir -vp $files/$version/Mono/x86_64
	mkdir -vp $files/$version/Plugins/x86
	mkdir -vp $files/$version/Plugins/x86_64
	mv -v $files/linux32_withgfx_development*/LinuxPlayer $files/$version/x86
	mv -v $files/linux64_withgfx_development*/LinuxPlayer $files/$version/x86_64
	mv -v $files/linux32_withgfx_development*/Data/Plugins/x86/ScreenSelector.so $files/$version/Plugins/x86
	mv -v $files/linux64_withgfx_development*/Data/Plugins/x86_64/ScreenSelector.so $files/$version/Plugins/x86_64
	mv -v $files/linux32_headless_development*/Data/Mono/x86/libmono.so $files/$version/Mono/x86
	mv -v $files/linux64_headless_development*/Data/Mono/x86_64/libmono.so $files/$version/Mono/x86_64

	echo ""
	echo "-- strip engine binaries"
	strip -v $files/$version/x86* $files/$version/Mono/x86*/* $files/$version/Plugins/x86*/*

	echo ""
	echo "-- create archive"
	cd $files && tar cvfJ "$txz" $version
	cd /tmp
	rm -rf "$files" "$exe"

	echo ""
	echo "-- archive saved at \`$HOME/.local/share/UnityEngine2deb/Engines/$version.tar.xz'"

	exit 0
fi

### continue downloading pre-packaged engine binaries
md5_1=$(echo "$dldata" | awk '{print $2}')
url=$(echo "$dldata" | awk '{print $3}')

echo ""
echo "-- download Unity $version engine files"
wget -O "$txz" "$url"
md5_2=$(md5sum "$txz" | awk '{print $1}')
if [ "$md5_1" != "$md5_2" ]; then
	echo ""
	echo "Something went wrong!"
	echo "Deleting \`$txz'"
	rm -f "$txz"
	exit 1
fi

exit 0
